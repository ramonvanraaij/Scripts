#!/usr/bin/env bash
# update-cloudflare-ips.sh
# =================================================================
# Nginx Cloudflare IP Updater
#
# Copyright (c) 2025 Rámon van Raaij
# License: MIT
# Author: Rámon van Raaij | Bluesky: @ramonvanraaij.nl | GitHub: https://github.com/ramonvanraaij | Website: https://ramon.vanraaij.eu
#
# This script automates the process of keeping Nginx's trusted proxy
# list for Cloudflare up-to-date.
#
# It performs the following actions:
# 1. Fetches the latest IPv4 and IPv6 address ranges from Cloudflare.
# 2. Formats them into a valid Nginx configuration file.
# 3. Compares the newly generated file with the existing one.
# 4. If changes are detected, it safely updates the configuration:
#    a. Creates a backup of the old file.
#    b. Validates the new configuration with `nginx -t`.
#    c. If valid, reloads Nginx to apply the changes.
#    d. If invalid, automatically reverts to the backup.
#
# --- Setup ---
# 1. Configuration: Edit the `CONFIG_FILE` variable below to match the
#    path where you want to store the Cloudflare IP list.
#
# 2. Automation: This script is designed to be run automatically via cron.
#    Run `crontab -e` and add a line to schedule it, for example, to
#    run daily at 4:30 AM:
#    30 4 * * * /path/to/your/script/update-cloudflare-ips.sh
#
# --- Usage ---
# Make the script executable: chmod 700 update-cloudflare-ips.sh
#
# You can run it manually at any time:
#   sudo ./update-cloudflare-ips.sh
# =================================================================

# --- Script Configuration ---
# Exit on error, treat unset variables as an error, and fail on piped command errors.
set -o errexit -o nounset -o pipefail

# =================================================================
# --- User Configuration ---
# Please edit the variables in this section to match your setup.
# =================================================================

# The full path to the Nginx config file that will store the Cloudflare IPs.
# This file should be included in your main nginx.conf's http block.
readonly CONFIG_FILE="/etc/nginx/http.d/cloudflare-ips.conf"

# =================================================================
# --- Do Not Edit Below This Line ---
# =================================================================

# --- Script Internal Variables ---
# Create a temporary file to build the new configuration.
readonly TMP_FILE=$(mktemp)

# --- Functions ---

# Logs a message to the console with a timestamp.
log_message() {
    printf '[%s] %s\n' "$(date '+%Y-%m-%d %H:%M:%S')" "$1"
}

# Ensures the temporary file is always removed when the script exits.
cleanup() {
    rm -f "${TMP_FILE}"
}

# --- Main script logic ---
main() {
    # Register the cleanup function to be called on any script exit.
    trap cleanup EXIT

    log_message "--- Starting Cloudflare IP update process ---"

    # --- 1. Pre-flight Checks ---
    # Ensure all required external commands are available before proceeding.
    local dependencies="curl nginx cmp"
    for cmd in $dependencies; do
        if ! command -v "$cmd" >/dev/null 2>&1; then
            log_message "FATAL: Required command '${cmd}' is not installed or not in PATH." >&2
            exit 1
        fi
    done
    log_message "All required commands are present."

    # --- 2. Build New Configuration File ---
    log_message "Fetching latest Cloudflare IP ranges..."
    {
        echo "# Cloudflare IP Ranges - Auto-generated on $(date)"
        echo "# Do not edit this file manually. It is managed by this script."
        # Fetch and format IPv4 ranges
        curl -s https://www.cloudflare.com/ips-v4 | sed 's/^/set_real_ip_from /;s/$/;/'
        # Fetch and format IPv6 ranges
        curl -s https://www.cloudflare.com/ips-v6 | sed 's/^/set_real_ip_from /;s/$/;/'
    } > "${TMP_FILE}"
    log_message "Successfully built new IP list in temporary file."

    # --- 3. Compare and Update ---
    # Create the config file if it doesn't exist to prevent cmp error on the first run.
    touch "${CONFIG_FILE}"

    log_message "Comparing new list with the existing configuration..."
    if cmp -s "${TMP_FILE}" "${CONFIG_FILE}"; then
        log_message "Cloudflare IPs are already up-to-date. No changes needed."
        exit 0
    fi

    log_message "Cloudflare IPs have changed. Updating configuration..."
    local backup_file="${CONFIG_FILE}.bak"
    # Create a backup of the current configuration.
    cp "${CONFIG_FILE}" "${backup_file}"
    # Overwrite the live configuration with the new one.
    cp "${TMP_FILE}" "${CONFIG_FILE}"

    # --- 4. Validate and Reload ---
    log_message "Testing new Nginx configuration..."
    if ! nginx -t; then
        log_message "ERROR: New Nginx configuration is invalid. Reverting to the old IP list."
        # If the test fails, restore the backup and exit with an error.
        mv "${backup_file}" "${CONFIG_FILE}"
        exit 1
    fi

    # The new configuration is valid, so we can remove the backup.
    rm "${backup_file}"

    log_message "New configuration is valid. Reloading Nginx service..."
    # Use the modern systemctl if available, otherwise fall back to the older service command.
    if command -v systemctl &>/dev/null; then
        systemctl reload nginx
    else
        service nginx reload
    fi
    
    log_message "Successfully updated Cloudflare IPs and reloaded Nginx."
}

# Execute the main function.
main
